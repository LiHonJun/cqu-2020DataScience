一、实验练习目的
1.掌握numpy库的常见功能函数；
2.掌握numpy广播运算
3.掌握numpy索引与切片操作和转置运算

二、实验练习项目内容
1.导入numpy包
2.建立一个一维数组 a 初始化为[4,5,6]
(1)输出a 的类型（type）
(2)输出a的各维度的大小（shape）
(3)输出a的第一个元素（值为4）
3.建立一个二维数组 b,初始化为 [ [4, 5, 6],[1, 2, 3]]
(1)输出各维度的大小（shape）
(2)输出 b(0,0)，b(0,1),b(1,1) 这三个元素
4.
(1)建立一个全0矩阵 a, 大小为 3x3; 类型为整型
(2)建立一个全1矩阵b,大小为4x5
(3)建立一个单位矩阵c ,大小为4x4
(4)生成一个随机数矩阵d,大小为 3x2
5.建立一个数组 a,(值为[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]] )
(1)打印a
(2)输出下标为(2,3),(0,0) 这两个数组元素的值
6.把上一题的 a数组的 0到1行 2到3列，放到b里面去。 
(1) 输出b
(2) 输出b 的（0,0）这个元素的值
7.把第5题的数组的最后两行所有元素放到 c中： 
(1)输出 c
(2) 输出 c 中第一行的最后一个元素（提示，使用 -1 表示最后一个元素）
8.建立数组a,初始化a为[[1, 2], [3, 4], [5, 6]]，输出 （0,0）（1,1）（2,0）这三个元素
9.建立矩阵a ,初始化为[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]，输出(0,0),(1,2),(2,0),(3,1) 
10.对9 中输出的那四个元素，每个都加上10，然后从新输出矩阵a.
11.执行 x = np.array([1, 2])，然后输出 x 的数据类型
12.执行 x = np.array([1.0, 2.0]) ，然后输出 x 的数据类型
13.执行 x = np.array([[1, 2], [3, 4]], dtype=np.float64) ，y = np.array([[5, 6], [7, 8]], dtype=np.float64)，然后输出 x+y ,和 np.add(x,y)
14.利用 13题目中的x,y 输出 x-y 和 np.subtract(x,y)
15.利用13题目中的x，y 输出 x*y ,和 np.multiply(x, y) 还有 np.dot(x,y),比较差异。然后自己换一个不是方阵试试。
16.利用13题目中的，x,y,输出 x / y .(提示 ： 使用函数 np.divide())
17.利用13题目中的，x,输出 x的 开方。(提示： 使用函数 np.sqrt() )
18.利用13题目中的，x,y ,执行 print(x.dot(y)) 和 print(np.dot(x,y))
19.利用13题目中的 x,进行求和。提示：输出三种求和
(1)print( np.sum(x) )
(2)print( np.sum(x, axis =0）)
(3)print( np.sum(x, axis = 1)）
20.利用13题目中的 x,进行求平均数。提示：输出三种平均数
(1)print( np.mean(x) )
(2)print( np.mean(x,axis = 0) )
(3) print( np.mean(x,axis =1) )
21.利用13题目中的x，对x 进行矩阵转置，然后输出转置后的结果，（提示： x.T 表示对 x 的转置）
22.利用13题目中的x,求e的指数（提示： 函数 np.exp()）

------------------------------------------------------

三、实验练习的算法（伪代码或者流程图）和源程序

import numpy as np  # 1
print("import numpy as np")

import numpy as np
a = np.array([4, 5, 6])
print("a的类型", a.dtype)  # 2 type
print("a的维度大小", a.ndim)  # 维度
print("a的第一个元素", a[0])  # 索引

import numpy as np
b = np.array([[4, 5, 6], [1, 2, 3]])  # 3 >1维度
print("b的维度大小", b.ndim)
print("所求三个元素", b[0, 0], b[0, 1], b[1, 1])

import numpy as np  # 1
a = np.zeros((3, 3), dtype = np.int)
print(a)
print()
b = np.ones((4, 5), dtype = np.int)
print(b)
print()
c = np.ones((4, 4), dtype = np.int)
print(c)
print()
d = np.random.randint(0, 10, (3, 2))
print(d)


import numpy as np  # 1
a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(a)
print(a[2, 3], a[0, 0])

b = a[0:2,2:4]
print(b)
print(b[0,0])

c = a[-2:]
print(c)
print(c[0,-1])


import numpy as np  # 1
a = np.array([[1, 2], [3, 4], [5, 6]])
print(a[0, 0], a[1, 1], a[2, 0])


import numpy as np  # 1
a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])
print(a[0, 0], a[1, 2], a[2, 0], a[3, 1])
a_new = np.array([a[0, 0]+10, a[1, 2]+10, a[2, 0]+10, 10+a[3, 1]])
print(a_new)


import numpy as np  # 1
x0 = np.array([1, 2])
print(x0.dtype)

x1 = np.array([1.0, 2.0])
print(x1.dtype)

x = np.array([[1, 2], [3, 4]], dtype=np.float64)
y = np.array([[5, 6], [7, 8]], dtype=np.float64)
print(x+y)
result = np.add(x,y)
print(result)

print(x-y)
result1 = np.subtract(x,y)
print(result1)

print(x*y)
result2 = np.multiply(x,y)
result3 = np.dot(x,y)
print(result2)
print(result3)


result4 = np.divide(x,y)
result5 = np.sqrt(x,y)
print(result4)
print(result5)
print(x.dot(y))
print(np.dot(x,y))

print(np.sum(x))
print(np.sum(x, axis = 0))
print(np.sum(x, axis = 1))

print(np.mean(x))
print(np.mean(x, axis = 0))
print(np.mean(x, axis = 1))

print(x.T)
print(np.exp(x))

